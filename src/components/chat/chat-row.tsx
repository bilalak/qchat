"use client"

import { OctagonAlert } from "lucide-react"
import React, { FC, useState } from "react"

import { Markdown } from "@/components/markdown/markdown"
import Typography from "@/components/typography"
import { calculateFleschKincaidScore } from "@/features/chat/chat-services/chat-flesch"
import { CreateUserFeedback } from "@/features/chat/chat-services/chat-message-service"
import { useChatContext } from "@/features/chat/chat-ui/chat-context"
import { ChatRole, ChatSentiment, FeedbackType, PromptMessage } from "@/features/chat/models"
import { showError } from "@/features/globals/global-message-store"
import { AI_NAME } from "@/features/theme/theme-config"
import { AssistantButtons } from "@/features/ui/assistant-buttons"
import Modal from "@/features/ui/modal"
import RewriteMessageModal from "@/features/ui/rewriteMessageModal"

interface ChatRowProps {
  chatMessageId: string
  name: string
  message: PromptMessage
  type: ChatRole
  chatThreadId: string
  showAssistantButtons: boolean
  threadLocked?: boolean
}

export const ChatRow: FC<ChatRowProps> = props => {
  const [isIconChecked, setIsIconChecked] = useState(false)

  const [thumbsUpClicked, setThumbsUpClicked] = useState(props.message.sentiment === ChatSentiment.Positive)
  const [thumbsDownClicked, setThumbsDownClicked] = useState(props.message.sentiment === ChatSentiment.Negative)

  const [feedbackType, setFeedbackType] = useState(props.message.feedback)
  const [feedbackReason, setFeedbackReason] = useState(props.message.reason)

  const [feedbackMessage, setFeedbackMessage] = useState("")
  const [isFeedbackModalOpen, setFeedbackModalOpen] = useState(false)
  const [isRewriteMessageModalOpen, setIsRewriteMessageModalOpen] = useState(false)
  const { openModal, closeModal } = useChatContext()

  const toggleButton = (buttonId: string): void => {
    switch (buttonId) {
      case "ThumbsUp":
        setThumbsUpClicked(prevState => !prevState)
        setThumbsDownClicked(false)
        setIsIconChecked(false)
        CreateUserFeedback(
          props.chatMessageId,
          FeedbackType.None,
          ChatSentiment.Positive,
          "",
          props.chatThreadId
        ).catch(err => showError(err))
        break
      case "ThumbsDown":
        setThumbsDownClicked(prevState => !prevState)
        setThumbsUpClicked(false)
        setIsIconChecked(false)
        break
      case "CopyButton":
        setIsIconChecked(prevState => !prevState)
        setThumbsUpClicked(false)
        setThumbsDownClicked(false)
        break
      case "RewriteButton":
        setIsIconChecked(false)
        setThumbsUpClicked(false)
        setThumbsDownClicked(false)
        break
      default:
        break
    }
  }

  const handleRewriteWithSuggestions = (): void => {
    toggleButton("RewriteButton")
    setIsRewriteMessageModalOpen(true)
    openModal?.()
  }

  const handleCopyButton = (): void => {
    toggleButton("CopyButton")
    const messageWithAttribution = props.message.content + ("\n\nText generated by " + AI_NAME)
    navigator.clipboard
      .writeText(messageWithAttribution)
      .then(() => {
        setFeedbackMessage("Message copied to clipboard.")
      })
      .catch(_err => {
        setFeedbackMessage("Something happened and the message has not been copied.")
      })
      .finally(() => setTimeout(() => setFeedbackMessage(""), 2000))
  }

  const handleThumbsUpClick = (): void => {
    toggleButton("ThumbsUp")
    setFeedbackMessage("Positive feedback submitted.")
    setTimeout(() => setFeedbackMessage(""), 2000)

    setFeedbackType(FeedbackType.None)
    setFeedbackReason("")
  }

  const handleThumbsDownClick = (): void => {
    setFeedbackModalOpen(true)
    openModal?.()
  }

  async function handleFeedbackModalSubmit(): Promise<void> {
    const resp = await CreateUserFeedback(
      props.chatMessageId,
      feedbackType || FeedbackType.None,
      ChatSentiment.Negative,
      (feedbackReason || "").trim(),
      props.chatThreadId
    )

    if (resp.status !== "OK") {
      showError("Failed to submit feedback.")
      return
    }

    if (!thumbsDownClicked) toggleButton("ThumbsDown")

    setFeedbackMessage("Negative feedback submitted.")
    setTimeout(() => setFeedbackMessage(""), 2000)

    setFeedbackModalOpen(false)
    closeModal?.()
  }

  function handleRewriteModalSubmit(): void {
    setIsRewriteMessageModalOpen(false)
    closeModal?.()
  }

  const handleModalClose = (): void => {
    setFeedbackModalOpen(false)
    setIsRewriteMessageModalOpen(false)
    closeModal?.()
  }

  const safetyWarning = props.message.contentFilterResult ? (
    <div
      className="my-2 flex max-w-none justify-center space-x-2 rounded-md bg-alert p-2 text-base text-primary md:text-base"
      tabIndex={0}
      aria-label="Content Safety Warning"
    >
      <div className="flex items-center justify-center">
        <OctagonAlert size={20} />
      </div>
      <div className="flex flex-grow items-center justify-center text-center">
        This message has triggered our content safety warnings, please rephrase your message, start a new chat or reach
        out to support if you have concerns.
      </div>
    </div>
  ) : null

  const fleshScore = calculateFleschKincaidScore(props.message.content)

  const getRewriterAction = (score: number, contentFilter: boolean): "Simplify" | "Improve" | "Explain" => {
    if (contentFilter) return "Explain"
    if (score > 8) return "Simplify"
    if (score <= 8) return "Improve"
    return "Improve"
  }

  return (
    <article className={"container mx-auto flex flex-col py-1 pb-2"}>
      <section
        className={`prose prose-slate max-w-none flex-col gap-4 overflow-hidden break-words rounded-md px-4 py-2 text-base text-text dark:prose-invert prose-p:leading-relaxed prose-pre:p-0 md:text-base ${props.threadLocked && "border-4 border-error"} ${props.type === "assistant" && "bg-backgroundShade"} ${props.type != "assistant" && "bg-altBackgroundShade"}`}
      >
        <div className="flex w-full items-center justify-between">
          {props.type === "assistant" && (
            <Typography variant="h3" className="m-0 flex-1 text-heading" tabIndex={0}>
              {props.name}
            </Typography>
          )}
          <div className="flex items-center gap-4">
            {props.type === "assistant" && props.showAssistantButtons && (
              <AssistantButtons
                fleshScore={fleshScore}
                isIconChecked={isIconChecked}
                thumbsUpClicked={thumbsUpClicked}
                thumbsDownClicked={thumbsDownClicked}
                rewriteWithSuggestions={false}
                handleCopyButton={handleCopyButton}
                handleThumbsUpClick={handleThumbsUpClick}
                handleThumbsDownClick={handleThumbsDownClick}
                handleRewriteWithSuggestions={handleRewriteWithSuggestions}
              />
            )}
          </div>
          <Modal
            chatThreadId={props.chatThreadId}
            chatMessageId={props.chatMessageId}
            feedbackType={feedbackType}
            onFeedbackTypeChange={setFeedbackType}
            feedbackReason={feedbackReason}
            onFeedbackReasonChange={setFeedbackReason}
            open={isFeedbackModalOpen}
            onClose={handleModalClose}
            onSubmit={handleFeedbackModalSubmit}
          />
          <RewriteMessageModal
            chatThreadId={props.chatThreadId}
            chatMessageId={props.chatMessageId}
            open={isRewriteMessageModalOpen}
            rewriteAction={getRewriterAction(fleshScore, !!props.message.contentFilterResult)}
            message={props.message.content}
            onClose={handleModalClose}
            onSubmit={handleRewriteModalSubmit}
          />
        </div>
        <div
          className="prose prose-slate max-w-none break-words text-base text-text dark:prose-invert prose-p:leading-relaxed prose-pre:p-0 md:text-base"
          tabIndex={0}
        >
          {props.type === "assistant" && <Markdown content={props.message.content} />}
          {props.type != "assistant" && <Markdown content={"**" + props.name + "**" + ": " + props.message.content} />}
        </div>
        {safetyWarning}
        <div className="sr-only" aria-live="assertive">
          {feedbackMessage}
        </div>
      </section>
    </article>
  )
}
export default ChatRow
